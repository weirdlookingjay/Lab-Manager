# Generated by Django 4.2.18 on 2025-03-07 18:56

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("is_superuser", models.BooleanField(default=False)),
                ("username", models.CharField(max_length=150, unique=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("first_name", models.CharField(blank=True, max_length=30)),
                ("last_name", models.CharField(blank=True, max_length=30)),
                ("bio", models.TextField(blank=True, null=True)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="profile_pics/"),
                ),
                ("role", models.CharField(default="user", max_length=50)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("last_password_change", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("failed_login_attempts", models.IntegerField(default=0)),
                ("locked_until", models.DateTimeField(blank=True, null=True)),
                ("require_password_change", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "user_management_customer",
                "managed": True,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("message", models.TextField()),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                        ],
                        default="INFO",
                        max_length=10,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Computer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.CharField(max_length=15, unique=True)),
                ("label", models.CharField(max_length=100)),
                ("hostname", models.CharField(blank=True, max_length=100, null=True)),
                ("last_seen", models.DateTimeField(blank=True, null=True)),
                ("is_online", models.BooleanField(default=False)),
                ("model", models.CharField(blank=True, max_length=100, null=True)),
                ("last_transfer", models.DateTimeField(blank=True, null=True)),
                ("total_transfers", models.IntegerField(default=0)),
                ("successful_transfers", models.IntegerField(default=0)),
                ("failed_transfers", models.IntegerField(default=0)),
                ("total_bytes_transferred", models.BigIntegerField(default=0)),
                ("os_version", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "user_profile",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("username", models.CharField(blank=True, max_length=100, null=True)),
                ("password", models.CharField(blank=True, max_length=100, null=True)),
                ("cpu_percent", models.FloatField(blank=True, null=True)),
                ("memory_percent", models.FloatField(blank=True, null=True)),
                ("disk_usage_percent", models.FloatField(blank=True, null=True)),
                ("last_metrics_update", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "computers",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="LogPattern",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "pattern_type",
                    models.CharField(
                        choices=[
                            ("SEQUENCE", "Event Sequence"),
                            ("THRESHOLD", "Threshold Based"),
                            ("CORRELATION", "Event Correlation"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(help_text="JSON defining the pattern conditions"),
                ),
                ("alert_threshold", models.IntegerField(default=1)),
                ("cooldown_minutes", models.IntegerField(default=60)),
                ("enabled", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_triggered", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("info", "Info"),
                            ("success", "Success"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                        ],
                        default="info",
                        max_length=10,
                    ),
                ),
                ("read", models.BooleanField(default=False)),
                ("archived", models.BooleanField(default=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PasswordPolicy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "min_length",
                    models.IntegerField(
                        default=8,
                        validators=[
                            django.core.validators.MinValueValidator(8),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                ("require_uppercase", models.BooleanField(default=True)),
                ("require_lowercase", models.BooleanField(default=True)),
                ("require_numbers", models.BooleanField(default=True)),
                ("require_special_chars", models.BooleanField(default=True)),
                (
                    "password_expiry_days",
                    models.IntegerField(
                        default=90,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(365),
                        ],
                    ),
                ),
                (
                    "max_login_attempts",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "lockout_duration_minutes",
                    models.IntegerField(
                        default=30,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1440),
                        ],
                    ),
                ),
                (
                    "prevent_password_reuse",
                    models.IntegerField(
                        default=3,
                        help_text="Number of previous passwords to prevent reusing",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Password Policy",
                "verbose_name_plural": "Password Policies",
            },
        ),
        migrations.CreateModel(
            name="Schedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "schedule_type",
                    models.CharField(
                        choices=[
                            ("I", "Immediate"),
                            ("H", "Hourly"),
                            ("D", "Daily"),
                            ("W", "Weekly"),
                            ("M", "Monthly"),
                        ],
                        max_length=1,
                    ),
                ),
                ("func", models.CharField(max_length=255)),
                ("enabled", models.BooleanField(default=True)),
                ("hours", models.IntegerField(blank=True, null=True)),
                ("minutes", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("color", models.CharField(default="#3B82F6", max_length=7)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_key", models.CharField(max_length=40)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("device_type", models.CharField(default="unknown", max_length=20)),
                ("location", models.CharField(blank=True, max_length=100, null=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-last_activity"],
            },
        ),
        migrations.CreateModel(
            name="SystemLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("message", models.TextField()),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("DEBUG", "Debug"),
                        ],
                        default="INFO",
                        max_length=10,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("COMPUTER_STATUS", "Computer Status"),
                            ("FILE_SCAN", "File Scan"),
                            ("FILE_ACCESS", "File Access"),
                            ("SYSTEM", "System"),
                            ("AUTH", "Authentication"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "event",
                    models.CharField(
                        choices=[
                            ("COMPUTER_ONLINE", "Computer Online"),
                            ("COMPUTER_OFFLINE", "Computer Offline"),
                            ("COMPUTER_REGISTERED", "Computer Registered"),
                            ("COMPUTER_UPDATED", "Computer Updated"),
                            ("SCAN_STARTED", "Scan Started"),
                            ("SCAN_COMPLETED", "Scan Completed"),
                            ("SCAN_ERROR", "Scan Error"),
                            ("FILE_FOUND", "File Found"),
                            ("FILE_INDEXED", "File Indexed"),
                            ("FILE_MODIFIED", "File Modified"),
                            ("FILE_DELETED", "File Deleted"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OPEN", "Open"),
                            ("PENDING", "Pending"),
                            ("RESOLVED", "Resolved"),
                            ("OVERDUE", "Overdue"),
                        ],
                        default="OPEN",
                        max_length=20,
                    ),
                ),
                ("details", models.JSONField(blank=True, default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "computer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="user_management.computer",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="ScanSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("time", models.TimeField()),
                ("selected_days", models.JSONField(blank=True, null=True)),
                ("monthly_date", models.IntegerField(blank=True, null=True)),
                ("enabled", models.BooleanField(default=True)),
                ("email_notification", models.BooleanField(default=True)),
                ("email_addresses", models.JSONField(blank=True, null=True)),
                ("next_run", models.DateTimeField(blank=True, null=True)),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "computers",
                    models.ManyToManyField(
                        related_name="scan_schedules", to="user_management.computer"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scan_schedules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Scan Schedule",
                "verbose_name_plural": "Scan Schedules",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="PasswordHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Password History",
                "verbose_name_plural": "Password Histories",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LoginAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("success", models.BooleanField(default=False)),
                (
                    "failure_reason",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="login_attempts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="LogCorrelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("correlation_id", models.UUIDField(default=uuid.uuid4)),
                ("correlation_type", models.CharField(max_length=50)),
                ("confidence_score", models.FloatField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "primary_log",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="primary_correlations",
                        to="user_management.systemlog",
                    ),
                ),
                (
                    "related_logs",
                    models.ManyToManyField(
                        related_name="related_correlations",
                        to="user_management.systemlog",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LogAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("triggered_at", models.DateTimeField(auto_now_add=True)),
                ("details", models.JSONField()),
                ("acknowledged", models.BooleanField(default=False)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "matched_logs",
                    models.ManyToManyField(to="user_management.systemlog"),
                ),
                (
                    "pattern",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="user_management.logpattern",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LogAggregation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "period",
                    models.CharField(
                        choices=[
                            ("HOUR", "Hourly"),
                            ("DAY", "Daily"),
                            ("WEEK", "Weekly"),
                            ("MONTH", "Monthly"),
                        ],
                        max_length=10,
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("COMPUTER_STATUS", "Computer Status"),
                            ("FILE_SCAN", "File Scan"),
                            ("FILE_ACCESS", "File Access"),
                            ("SYSTEM", "System"),
                            ("AUTH", "Authentication"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "event",
                    models.CharField(
                        choices=[
                            ("COMPUTER_ONLINE", "Computer Online"),
                            ("COMPUTER_OFFLINE", "Computer Offline"),
                            ("COMPUTER_REGISTERED", "Computer Registered"),
                            ("COMPUTER_UPDATED", "Computer Updated"),
                            ("SCAN_STARTED", "Scan Started"),
                            ("SCAN_COMPLETED", "Scan Completed"),
                            ("SCAN_ERROR", "Scan Error"),
                            ("FILE_FOUND", "File Found"),
                            ("FILE_INDEXED", "File Indexed"),
                            ("FILE_MODIFIED", "File Modified"),
                            ("FILE_DELETED", "File Deleted"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("DEBUG", "Debug"),
                        ],
                        max_length=10,
                    ),
                ),
                ("count", models.IntegerField(default=0)),
                ("error_count", models.IntegerField(default=0)),
                ("warning_count", models.IntegerField(default=0)),
                ("unique_users", models.IntegerField(default=0)),
                ("unique_computers", models.IntegerField(default=0)),
                ("most_common_message", models.TextField(blank=True)),
                ("details", models.JSONField(default=dict)),
            ],
            options={
                "ordering": ["-start_time", "category"],
                "indexes": [
                    models.Index(
                        fields=["period", "start_time"],
                        name="user_manage_period_457201_idx",
                    ),
                    models.Index(
                        fields=["category", "event"],
                        name="user_manage_categor_591f8e_idx",
                    ),
                    models.Index(fields=["level"], name="user_manage_level_e399bb_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="FileTransfer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("source_file", models.CharField(max_length=255)),
                ("destination_file", models.CharField(max_length=255)),
                ("bytes_transferred", models.BigIntegerField()),
                ("successful", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "computer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transfers",
                        to="user_management.computer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DocumentTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("document_path", models.CharField(max_length=255)),
                ("computer", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="document_tags",
                        to="user_management.tag",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="Command",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("restart", "Restart Computer"),
                            ("update", "Update Agent"),
                            ("custom", "Custom Command"),
                        ],
                        max_length=50,
                    ),
                ),
                ("parameters", models.JSONField(blank=True, default=dict)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "computer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="commands",
                        to="user_management.computer",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="systemlog",
            index=models.Index(
                fields=["category", "event"], name="user_manage_categor_86d140_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="systemlog",
            index=models.Index(
                fields=["computer", "category"], name="user_manage_compute_4be90a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="systemlog",
            index=models.Index(
                fields=["timestamp", "level"], name="user_manage_timesta_7d293b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logcorrelation",
            index=models.Index(
                fields=["correlation_id"], name="user_manage_correla_a92aa7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logcorrelation",
            index=models.Index(
                fields=["correlation_type"], name="user_manage_correla_cc4ffe_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logcorrelation",
            index=models.Index(
                fields=["created_at"], name="user_manage_created_1c031a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="documenttag",
            unique_together={("document_path", "computer", "tag")},
        ),
    ]
